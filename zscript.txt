version "4.10"

class DinkMe : EventHandler {
	int reapplyTick;
	
	override void WorldTick() {
		++reapplyTick;
		
		if (reapplyTick >= 35) {
			for (int i = 0; i < MAXPLAYERS; i++) {
				if (!playerInGame[i]) {
					continue;
				}
				
				let pmo = players[i].mo;
				
				if (!pmo || pmo.health <= 0) {
					continue;
				}
				
				let head = pmo.FindInventory("DinkMeHead", true);
				
				if (head) {
					double hRadius = head.radius;
					double hHeight = head.height;
					
					if ((hRadius != -1 && pmo.radius != hRadius) || (hRadius != -1 && pmo.height != hHeight)) {
						ApplyToPlayerPawn(pmo);
					}
				}
			}
			
			reapplyTick = 0;
		}
	}
	
	override void WorldThingSpawned(WorldEvent e) {
		ApplyToMonster(e);
	}
	
	override void WorldThingRevived(WorldEvent e) {
		ApplyToMonster(e);
	}
	
	override void PlayerSpawned(PlayerEvent e) {
		ApplyToPlayer(e);
	}
	
	override void PlayerRespawned(PlayerEvent e) {
		ApplyToPlayer(e);
	}
	
	static void ApplyToMonster(WorldEvent e) {
		let mo = e.thing;
		
		if (mo && mo.bIsMonster) {
			mo.A_TakeInventory("DinkMeHead");
			
			string className = "DinkMe_" .. mo.GetClassName();
			class<DinkMeHead> cls = className;
			
			if (!cls) {
				className = "DinkMe_" .. mo.GetSpecies();
				cls = className;
			}
			
			if (cls) {
				mo.A_GiveInventory(cls);
			}
		}
	}
	
	static void ApplyToPlayer(PlayerEvent e) {
		if (sv_dinkMe_player) {
			PlayerInfo player = players[e.playerNumber];
			
			if (player) {
				PlayerPawn pmo = PlayerPawn(player.mo);
				
				if (pmo) {
					ApplyToPlayerPawn(pmo);
				}
			}
		}
	}
	
	static void ApplyToPlayerPawn(PlayerPawn pmo) {
		pmo.A_TakeInventory("DinkMeHead");
		
		string className = "DinkMe_" .. pmo.GetClassName();
		class<DinkMeHead> cls = className;
		
		if (cls) {
			pmo.A_GiveInventory(cls);
		}
	}
}

class DinkMeHead : Inventory {
	int headMinZ, headMaxZ;
	property HeadZ: headMinZ, headMaxZ;
	
	double headCone;
	property HeadCone: headCone;
	
	Default {
		Radius -1;
		Height -1;
		Inventory.MaxAmount 1;
		
		+Inventory.Undroppable
		+Inventory.Untossable
		+Inventory.AutoActivate
	}
	
	States {
		Use:
			TNT1 A 0;
			Fail;
		
		Pickup:
			TNT1 A 0 {
				return true;
			}
			
			Stop;
	}
	
	override void AttachToOwner(Actor other) {
		if (!headMinZ) {
			headMinZ = ((height != -1) ? height : other.height) * 0.75;
		}
		
		if (!headMaxZ) {
			headMaxZ = (height != -1) ? height : other.height;
		}
		
		if (!headCone) {
			headCone = 180;
		}
		
		if (other.A_SetSize(radius, height, true) && other is "PlayerPawn") {
			double viewHeight = headMinZ + ((headMaxZ - headMinZ) * 0.5);
			
			let pmo = PlayerPawn(other);
			let player = pmo.player;
			
			if (player) {
				player.viewHeight = viewHeight;
			}
			
			pmo.viewHeight = viewHeight;
			pmo.attackZOffset = viewHeight - (pmo.height * 0.5);
		}
		
		super.AttachToOwner(other);
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newDamage, bool passive, Actor inflictor, Actor source, int flags) {
		if (!owner || !passive || !inflictor) {
			return;
		}
		
		if (!IsClass(inflictor, 'BulletPuff')
			&& !IsClass(inflictor, 'Blood')
			&& !IsClass(inflictor, 'WTBowArrow')
			&& !IsClass(inflictor, 'WTMegaBowArrow')
			&& !IsClass(inflictor, 'Totenkopf_Tracer')
			&& !IsClass(inflictor, 'SamsaraMarathonBullet')) {
			return;
		}
		
		if (source is "PlayerPawn") {
			PlayerInfo p = PlayerPawn(source).player;
			
			if (p && p.readyWeapon is "Fist") {
				return;
			}
		}
		
		double inflictorZ = inflictor.pos.z;
		double ownerZ = owner.pos.z;
		
		if (inflictorZ >= (ownerZ + headMinZ) && inflictorZ <= (ownerZ + headMaxZ) && owner.AbsAngle(owner.angle, owner.AngleTo(inflictor, true)) < headCone) {
			if (!owner.bNoBlood) {
				owner.A_StartSound("DinkMe/hit", Chan_Body, ChanF_Overlap);
				
				for (int i; i < Random(3, 6); ++i) {
					owner.A_SpawnItemEx("Blood", 0, 0, inflictorZ - owner.pos.z, FRandom(-3, 3), FRandom(-3, 3), FRandom(5, 10), 0, SXF_NoCheckPosition | SXF_UseBloodColor);
				}
			}
			
			damageType = "Headshot";
			newDamage = sv_dinkMe_damage * damage;
		}
	}
	
	static bool IsClass(Actor act, Name cls) {
		class<Actor> who = cls;
		
		return (who && (act is who));
	}
}

#include "zscript/doom.txt"
#include "zscript/eviternity.txt"
#include "zscript/medb.txt"
#include "zscript/samsara.txt"
#include "zscript/valiant.txt"