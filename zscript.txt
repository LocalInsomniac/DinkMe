version "4.10"

class DinkMe : EventHandler {
	override void WorldThingSpawned(WorldEvent e) {
		let mo = e.thing;
		
		if (mo && mo.bIsMonster) {
			string className = "DinkMe_" .. mo.GetClassName();
			class<DinkMeHead> cls = className;
			
			if (!cls) {
				className = "DinkMe_" .. mo.GetSpecies();
				cls = className;
			}
			
			if (cls) {
				mo.A_GiveInventory(cls);
			}
		}
	}
	
	override void PlayerEntered(PlayerEvent e) {
		ApplyToPlayer(e);
	}
	
	override void PlayerSpawned(PlayerEvent e) {
		ApplyToPlayer(e);
	}
	
	override void PlayerRespawned(PlayerEvent e) {
		ApplyToPlayer(e);
	}
	
	static void ApplyToPlayer(PlayerEvent e) {
		if (sv_dinkMe_player) {
			PlayerInfo player = players[e.playerNumber];
			
			if (player) {
				PlayerPawn pmo = PlayerPawn(player.mo);
				
				if (pmo) {
					string className = "DinkMe_" .. pmo.GetClassName();
					class<DinkMeHead> cls = className;
					
					if (!cls) {
						className = "DinkMe_" .. pmo.GetSpecies();
						cls = className;
					}
					
					if (cls) {
						if (pmo.CountInv(cls)) {
							pmo.A_TakeInventory(cls);
						}
						
						pmo.A_GiveInventory(cls);
					}
				}
			}
		}
	}
}

class DinkMeHead : Inventory {
	int headMinZ, headMaxZ;
	property HeadZ: headMinZ, headMaxZ;
	
	double headCone;
	property HeadCone: headCone;
	
	Default {
		Radius -1;
		Height -1;
		Inventory.MaxAmount 1;
		
		+Inventory.Undroppable
		+Inventory.Untossable
		+Inventory.AutoActivate
	}
	
	States {
		Use:
			TNT1 A 0;
			Fail;
		
		Pickup:
			TNT1 A 0 {
				return true;
			}
			
			Stop;
	}
	
	override void AttachToOwner(Actor other) {
		if (!headMinZ) {
			headMinZ = ((height != -1) ? height : other.height) * 0.75;
		}
		
		if (!headMaxZ) {
			headMaxZ = (height != -1) ? height : other.height;
		}
		
		if (!headCone) {
			headCone = 180;
		}
		
		other.A_SetSize(radius, height, true);
		
		if (other is "PlayerPawn") {
			double viewHeight = headMinZ + ((headMaxZ - headMinZ) * 0.5);
			
			let pmo = PlayerPawn(other);
			let player = pmo.player;
			
			if (player) {
				player.viewHeight = viewHeight;
			}
			
			pmo.viewHeight = viewHeight;
			pmo.attackZOffset = viewHeight - (pmo.height * 0.5);
		}
		
		super.AttachToOwner(other);
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newDamage, bool passive, Actor inflictor, Actor source, int flags) {
		if (!owner || !passive || !inflictor) {
			return;
		}
		
		if (!IsClass(inflictor, 'BulletPuff')
			&& !IsClass(inflictor, 'Blood')
			&& !IsClass(inflictor, 'WTBowArrow')
			&& !IsClass(inflictor, 'WTMegaBowArrow')
			&& !IsClass(inflictor, 'Totenkopf_Tracer')
			&& !IsClass(inflictor, 'SamsaraMarathonBullet')) {
			return;
		}
		
		if (source is "PlayerPawn") {
			PlayerInfo p = PlayerPawn(source).player;
			
			if (p && p.readyWeapon is "Fist") {
				return;
			}
		}
		
		double inflictorZ = inflictor.pos.z;
		double ownerZ = owner.pos.z;
		
		if (inflictorZ >= (ownerZ + headMinZ) && inflictorZ <= (ownerZ + headMaxZ) && owner.AbsAngle(owner.angle, owner.AngleTo(inflictor, true)) < headCone) {
			if (!owner.bNoBlood) {
				owner.A_StartSound("DinkMe/hit", Chan_Body, ChanF_Overlap);
				
				for (int i; i < Random(3, 6); ++i) {
					owner.A_SpawnItemEx("Blood", 0, 0, inflictorZ - owner.pos.z, FRandom(-3, 3), FRandom(-3, 3), FRandom(5, 10), 0, SXF_NoCheckPosition | SXF_UseBloodColor);
				}
			}
			
			damageType = "Headshot";
			newDamage = sv_dinkMe_damage * damage;
		}
	}
	
	static bool IsClass(Actor act, Name cls) {
		class<Actor> who = cls;
		
		return (who && (act is who));
	}
}

/* ====
   DOOM
   ==== */

class DinkMe_DoomPlayer : DinkMeHead {
	Default {
		Radius 12;
		Height 50;
	}
}

class DinkMe_Zombieman : DinkMe_DoomPlayer {
	Default {
		Radius 12;
		Height 50;
	}
}

class DinkMe_ShotgunGuy : DinkMe_Zombieman {}

class DinkMe_ChaingunGuy : DinkMeHead {
	Default {
		Radius 15;
		Height 55;
	}
}

class DinkMe_DoomImp : DinkMeHead {
	Default {
		Radius 12;
		Height 53;
	}
}

class DinkMe_Demon : DinkMeHead {
	Default {
		Radius 15;
		Height 50;
		DinkMeHead.HeadZ 13, 36;
		DinkMeHead.HeadCone 60;
	}
}

class DinkMe_Spectre : DinkMe_Demon {}

class DinkMe_Cacodemon : DinkMeHead {
	Default {
		Radius 30;
		Height 58;
		DinkMeHead.HeadZ 36, 41;
		DinkMeHead.HeadCone 22.5;
	}
}

class DinkMe_BaronOfHell : DinkMeHead {
	Default {
		Radius 16;
		Height 70;
	}
}

class DinkMe_HellKnight : DinkMe_BaronOfHell {}

class DinkMe_Arachnotron : DinkMeHead {
	Default {
		Radius 36;
		Height 50;
		DinkMeHead.HeadZ 38, 50;
	}
}

class DinkMe_PainElemental : DinkMeHead {
	Default {
		Radius 28;
		Height 58;
		DinkMeHead.HeadZ 36, 50;
		DinkMeHead.HeadCone 30;
	}
}

class DinkMe_Revenant : DinkMeHead {
	Default {
		Radius 15;
		Height 75;
	}
}

class DinkMe_Fatso : DinkMeHead {
	Default {
		Radius 28;
		Height 60;
		DinkMeHead.HeadZ 45, 60;
		DinkMeHead.HeadCone 60;
	}
}

class DinkMe_ArchVile : DinkMeHead {
	Default {
		Radius 15;
		Height 72;
	}
}

class DinkMe_Cyberdemon : DinkMeHead {
	Default {
		Radius 30;
		Height 104;
	}
}

class DinkMe_WolfensteinSS : DinkMe_Zombieman {}

class DinkMe_CommanderKeen : DinkMeHead {
	Default {
		DinkMeHead.HeadZ 40, 50;
	}
}

/* ==========
   EVITERNITY
   ========== */

class DinkMe_AstralCaco : DinkMe_Cacodemon {
	Default {
		DinkMeHead.HeadZ 35, 40;
	}
}

class DinkMe_Annihilator : DinkMe_BaronOfHell {}
class DinkMe_FormerCaptain : DinkMe_ChaingunGuy {}
class DinkMe_NightmareDemon : DinkMe_Demon {}

/* =======
   VALIANT
   ======= */

class DinkMe_ValiantGuy : DinkMe_DoomPlayer {}
class DinkMe_ValiantImp : DinkMe_DoomImp {}
class DinkMe_ValiantDemon : DinkMe_Demon {}
class DinkMe_ValiantSpectre : DinkMe_Spectre {}
class DinkMe_ValiantSuperMancubus : DinkMe_Fatso {}
class DinkMe_ValiantPyroDemon : DinkMe_HellKnight {}
class DinkMe_ValiantCybruiser : DinkMe_BaronOfHell {}
class DinkMe_ValiantArachnotron : DinkMe_Arachnotron {}

class DinkMe_ValiantArachnorb : DinkMeHead {
	Default {
		Height 56;
		DinkMeHead.HeadZ 44, 56;
	}
}

class DinkMe_SuicideBomber : DinkMe_Zombieman {}
class DinkMe_ValiantFinalBoss : DinkMe_Archvile {}

/* ====
   MEDB
   ==== */

class DinkMe_NightmareImpMEDB : DinkMe_DoomImp {}
class DinkMe_NightmareSpectreMEDB : DinkMe_Spectre {}
class DinkMe_MeleeRevenantMEDB : DinkMe_Revenant {}
class DinkMe_PistolZombieMEDB : DinkMe_Zombieman {}

class DinkMe_HarkubusMEDB : DinkMe_Fatso {
	Default {
		Radius 41;
		Height 66;
		DinkMeHead.HeadZ 51, 66;
	}
}

class DinkMe_RocketZombieMEDB : DinkMe_Zombieman {}
class DinkMe_MorterZombieMEDB : DinkMe_Zombieman {}
class DinkMe_ChaingunSpiderMEDB : DinkMe_Arachnotron {}

class DinkMe_WatcherMEDB : DinkMeHead {
	Default {
		Radius 19;
		Height 38;
		DinkMeHead.HeadZ 16, 27;
		DinkMeHead.HeadCone 22.5;
	}
}

class DinkMe_ZombieMarineMEDB : DinkMe_Zombieman {}
class DinkMe_ChainsawZombieMEDB : DinkMe_Zombieman {}
class DinkMe_SuperShotgunGuyMEDB : DinkMe_ShotgunGuy {}
class DinkMe_SpreadgunGuyMEDB : DinkMe_ShotgunGuy {}

class DinkMe_WargrinMEDB : DinkMeHead {
	Default {
		Radius 15;
		Height 46;
		DinkMeHead.HeadZ 33, 46;
		DinkMeHead.HeadCone 60;
	}
}

class DinkMe_D64ArachnotronMEDB : DinkMe_Arachnotron {}

class DinkMe_HindringMEDB : DinkMeHead {
	Default {
		Radius 24;
		Height 52;
		DinkMeHead.HeadZ 29, 49;
		DinkMeHead.HeadCone 55;
	}
}

class DinkMe_SuperDemonMEDB : DinkMe_Cyberdemon {}

class DinkMe_HellionMEDB : DinkMeHead {
	Default {
		Radius 20;
		Height 55;
	}
}

class DinkMe_DevilImpMEDB : DinkMe_DoomImp {}
class DinkMe_SawcubusMEDB : DinkMe_DoomImp {}
class DinkMe_Cacodevil : DinkMe_Cacodemon {}
class DinkMe_NailgunZombieMEDB : DinkMe_ShotgunGuy {}
class DinkMe_AlphaDemonMEDB : DinkMe_Demon {}
class DinkMe_DarkSquireMEDB : DinkMe_HellKnight {}

/* ======================
   SAMSARA: REINCARNATION
   ====================== */

class DinkMe_WolfenPlayer : DinkMe_DoomPlayer {}
class DinkMe_GrondovalPlayer : DinkMe_DoomPlayer {}
class DinkMe_MarathonPlayer : DinkMe_DoomPlayer {}
class DinkMe_Zombieman2 : DinkMe_Zombieman {}
class DinkMe_ShotgunGuy2 : DinkMe_ShotgunGuy {}
class DinkMe_ChaingunGuy2 : DinkMe_ChaingunGuy {}
class DinkMe_Archvile2 : DinkMe_Archvile {}
class DinkMe_BaronOfHell2 : DinkMe_BaronOfHell {}
class DinkMe_HellKnight2 : DinkMe_HellKnight {}
class DinkMe_Cyberdemon2 : DinkMe_Cyberdemon {}
class DinkMe_Cacodemon2 : DinkMe_Cacodemon {}
class DinkMe_DoomDemon2 : DinkMe_Demon {}
class DinkMe_Spectre2 : DinkMe_Spectre {}
class DinkMe_Fatso2 : DinkMe_Fatso {}
class DinkMe_DoomImp2 : DinkMe_DoomImp {}
class DinkMe_Nazi2 : DinkMe_WolfensteinSS {}
class DinkMe_Revenant2 : DinkMe_Revenant {}
class DinkMe_PainElemental2 : DinkMe_PainElemental {}
class DinkMe_Arachnotron2 : DinkMe_Arachnotron {}